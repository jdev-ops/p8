#!/usr/bin/env bash

shopt -s expand_aliases

command -v _p8 >/dev/null 2>&1
cmd_result=$?
if [ $cmd_result -ne 0 ]; then
  command -v _p8.jar >/dev/null 2>&1
  cmd_result=$?
  if [ $cmd_result -ne 0 ]; then
    echo "You do not have _p8.jar in your path, please install it to continue"
    exit 1
  else
    alias _p8="_p8.jar"
  fi
fi

command -v crudini >/dev/null 2>&1
cmd_result=$?
if [ $cmd_result -ne 0 ]; then
  alias crudini="_p8.jar"
fi

command -v git >/dev/null 2>&1
cmd_result=$?
if [ $cmd_result -ne 0 ]; then
  echo "You do not have git in your path, please install it to continue"
  exit 1
fi

command -v gum >/dev/null 2>&1
cmd_result=$?
if [ $cmd_result -ne 0 ]; then
  echo "You do not have gum in your path, please install it to continue: https://github.com/charmbracelet/gum"
  exit 1
fi

mkdir -p .p8

USAGE="Usage: $0 <configDirPath> <repo> dir1 dir2 ... dirN"

if [ "$#" -lt 2 ]; then
  echo "$USAGE"
  exit 1
fi

configDirPath="$1"
shift
templates_repo="$1"
shift

current_path=$(pwd)
prefix_path=".p8/templates"
gum spin --title "Getting templates" -- git clone --no-checkout git@github.com:$templates_repo.git --depth 1 $prefix_path
cd $prefix_path
git sparse-checkout init --cone
git sparse-checkout set "$@"
git checkout main >/dev/null 2>&1

template_path="$1"
shift

while (("$#")); do
  if [ -f "$1/.default.ini" ]; then
    crudini --merge $template_path/.default.ini <$1/.default.ini
    rm -rf $1/.default.ini
    first_dir=$(ls -p $template_path | grep / | sed -n '1 p')
    (
      shopt -s dotglob
      cp -R -n $1/* $template_path/$first_dir
    )
  fi
  shift
done

cd $current_path
export TEMPLATE_PATH=$(realpath $prefix_path/$template_path)
export DESTINATION_PATH=$(realpath .)

joinByString() {
  local separator="$1"
  shift
  local first="$1"
  shift
  printf "%s" "$first" "${@/#/$separator}"
}

exitOption='>>> Generate files <<<'
while :; do
  array=$(crudini --get $TEMPLATE_PATH/.default.ini DEFAULT)

  IFS=$'\n'
  array=($array)

  res=""
  for index in "${!array[@]}"; do
    v=$(crudini --get $TEMPLATE_PATH/.default.ini DEFAULT "${array[$index]}")
    if [[ $v != '!'* ]]; then
      res+="${array[$index]}\n"
    fi
  done

  array=$(echo -e $res)

  array="$array
$exitOption"
  IFS=$'\n'
  array2=($array)
  export GUM_CHOOSE_HEADER="Set parameters values:"
  a=$(gum choose "${array2[@]}")

  if [[ $a == $exitOption ]]; then
    break
  fi

  cValue=$(crudini --get $TEMPLATE_PATH/.default.ini DEFAULT $a)
  if [[ $cValue == '#'* ]]; then
    cValue="${cValue:1}"
    IFS='|'
    read -a strarr <<<"$cValue"
    export GUM_CHOOSE_HEADER="Choose submodules:"
    aValue=$(gum choose --no-limit "${strarr[@]}")

    if test -f ".p8/$a"; then
      rm ".p8/$a"
    fi

    IFS=$'\n'
    aValue=($aValue)
    aValue=$(joinByString "|" "${aValue[@]}")

    echo -n "#"$aValue >.p8/$a

  elif [[ $cValue == '@'* ]]; then
    cValue="${cValue:1}"
    aValue=$(gum table -w 20,6 -s '|' <$configDirPath/${cValue}.csv | cut -d '|' -f 2)

    if test -f ".p8/$a"; then
      rm ".p8/$a"
    fi

    echo -n $aValue >.p8/$a

  else
    aValue=$(gum input --placeholder "$(crudini --get $TEMPLATE_PATH/.default.ini DEFAULT $a)")

    if [[ $aValue == "" ]]; then
      aValue="$(crudini --get $TEMPLATE_PATH/.default.ini DEFAULT $a)"
    fi

    if test -f ".p8/$a"; then
      rm ".p8/$a"
    fi

    echo -n $aValue >.p8/$a

  fi

done

# set default values
array=$(crudini --get $TEMPLATE_PATH/.default.ini DEFAULT)
IFS=$'\n'
array=($array)

for index in "${!array[@]}"; do
  key="${array[$index]}"
  value=$(crudini --get $TEMPLATE_PATH/.default.ini DEFAULT $key)

  if [ ! -f ".p8/$key" ]; then

    if [[ $value == '@'* ]]; then
      cValue="${value:1}"
      aValue=$(cat $configDirPath/${cValue}.csv | sed -n '2 p' | cut -d '|' -f 2)
      echo -n $aValue >.p8/$key

    elif [[ $value == '!'* ]]; then
      cValue="${value:1}"
      aValue=$(cat $configDirPath/${cValue})

      if test -f ".p8/$a"; then
        rm ".p8/$a"
      fi

      echo -n $aValue >.p8/$key

    else
      echo -n $value >.p8/$key
    fi

  fi

done

array=$(ls -p .p8 | grep -v /)
IFS=$'\n'
array=($array)

for index in "${!array[@]}"; do
  export "P8_PARAM_${array[$index]}"="$(cat .p8/${array[$index]})"
done

_p8

rm -Rf .p8
